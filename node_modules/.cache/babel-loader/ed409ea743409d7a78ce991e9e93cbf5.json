{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport { httpAuth } from \"../hooks/useAuth\";\nimport localStorageService from \"./localStorage.service\";\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\nhttp.interceptors.request.use(async function (config) {\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n    const expiresDate = localStorageService.getTokenExpiresDate();\n    const refreshToken = localStorageService.getRefreshToken();\n\n    if (refreshToken && expiresDate < Date.now()) {\n      const {\n        data\n      } = await httpAuth.post(\"token\", {\n        grant_type: \"refresh_token\",\n        refresh_token: refreshToken\n      });\n      localStorageService.setTokens({\n        refreshToken: data.refresh_token,\n        idToken: data.id_token,\n        expiresIn: data.expires_id,\n        localId: data.user_id\n      });\n    }\n\n    const accessToken = localStorageService.getAccessToken();\n\n    if (accessToken) {\n      config.params = { ...config.params,\n        auth: accessToken\n      };\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transformData(data) {\n  return data && !data._id ? Object.keys(data).map(key => ({ ...data[key]\n  })) : data;\n}\n\nhttp.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transformData(res.data)\n    };\n  }\n\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n  patch: http.patch\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/17 {auth and reg 2}/src/app/services/http.service.js"],"names":["axios","toast","configFile","httpAuth","localStorageService","http","create","baseURL","apiEndpoint","interceptors","request","use","config","isFireBase","containSlash","test","url","slice","expiresDate","getTokenExpiresDate","refreshToken","getRefreshToken","Date","now","data","post","grant_type","refresh_token","setTokens","idToken","id_token","expiresIn","expires_id","localId","user_id","accessToken","getAccessToken","params","auth","error","Promise","reject","transformData","_id","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","put","delete","patch"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport { httpAuth } from \"../hooks/useAuth\";\nimport localStorageService from \"./localStorage.service\";\n\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint,\n});\n\nhttp.interceptors.request.use(\n  async function (config) {\n    if (configFile.isFireBase) {\n      const containSlash = /\\/$/gi.test(config.url);\n      config.url =\n        (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n      const expiresDate = localStorageService.getTokenExpiresDate();\n      const refreshToken = localStorageService.getRefreshToken();\n      if (refreshToken && expiresDate < Date.now()) {\n        const { data } = await httpAuth.post(\"token\", {\n          grant_type: \"refresh_token\",\n          refresh_token: refreshToken,\n        });\n\n        localStorageService.setTokens({\n          refreshToken: data.refresh_token,\n          idToken: data.id_token,\n          expiresIn: data.expires_id,\n          localId: data.user_id,\n        });\n      }\n      const accessToken = localStorageService.getAccessToken();\n      if (accessToken) {\n        config.params = { ...config.params, auth: accessToken };\n      }\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\nfunction transformData(data) {\n  return data && !data._id\n    ? Object.keys(data).map((key) => ({\n        ...data[key],\n      }))\n    : data;\n}\n\nhttp.interceptors.response.use(\n  (res) => {\n    if (configFile.isFireBase) {\n      res.data = { content: transformData(res.data) };\n    }\n    return res;\n  },\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Something was wrong. Try it later\");\n    }\n    return Promise.reject(error);\n  }\n);\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n  patch: http.patch,\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}