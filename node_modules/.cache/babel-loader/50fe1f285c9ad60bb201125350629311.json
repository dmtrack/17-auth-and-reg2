{"ast":null,"code":"var _jsxFileName = \"/Users/dmtrack/Documents/JS/Module 2 React/17 {auth and reg 2}/src/app/components/page/editUserPage/editUserPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { validator } from \"../../../utils/validator\";\nimport api from \"../../../api\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radioField\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { useAuth } from \"../../../hooks/useAuth\";\nimport { useProfessions } from \"../../../hooks/useProfession\";\nimport { useQualities } from \"../../../hooks/useQualities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditUserPage = () => {\n  _s();\n\n  const {\n    userId\n  } = useParams();\n  const {\n    currentUser\n  } = useAuth();\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    professions\n  } = useProfessions();\n  const {\n    qualities\n  } = useQualities();\n  const [errors, setErrors] = useState({});\n  const professionsList = professions.map(p => ({\n    label: p.name,\n    value: p._id\n  }));\n  const [data, setData] = useState({\n    name: \"\",\n    email: \"\",\n    profession: \"\",\n    sex: \"male\",\n    qualities: []\n  });\n\n  const getQualities = elements => {\n    const qualitiesArray = [];\n\n    for (const elem of elements) {\n      for (const quality in qualities) {\n        if (elem === qualities[quality]._id) {\n          qualitiesArray.push({\n            _id: qualities[quality]._id,\n            name: qualities[quality].name,\n            color: qualities[quality].color\n          });\n        }\n      }\n    }\n\n    return qualitiesArray;\n  };\n\n  function getProfessionById(id) {\n    for (const prof of professions) {\n      if (prof._id === id) {\n        return prof.name;\n      }\n    }\n  }\n\n  const transformData = data => {\n    return data.map(qual => ({\n      label: qual.name,\n      value: qual._id,\n      color: qual.color\n    }));\n  };\n\n  const transformQualities = elements => {\n    const qualitiesArray = [];\n    elements.forEach(element => {\n      qualitiesArray.push({\n        id: element.value,\n        name: element.label,\n        color: element.color\n      });\n    });\n    return qualitiesArray;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isValid = validate();\n    if (!isValid) return;\n    const {\n      profession,\n      qualities\n    } = data;\n    api.users.update(userId, { ...data,\n      profession: getProfessionById(profession),\n      qualities: transformQualities(data.qualities)\n    }).then(data => history.push(`/users/${currentUser._id}`));\n    console.log({ ...data,\n      name: currentUser.name,\n      profession: getProfessionById(profession),\n      qualities: getQualities(transformData(qualities))\n    });\n  }; // const handleSubmit2 = (e) => {\n  //   e.preventDefault();\n  //   let {profession, qualities} = data;\n  //   console.log({\n  //     ...data,\n  //     profession: getProfessionById(data.profession),\n  //     qualities: getNameQualities2(data.qualities)\n  //   });\n  //   data = {\n  //     ...data,\n  //     profession: getProfessionById(data.profession),\n  //     qualities: getNameQualities2(data.qualities)\n  //   };\n  //\n  //   api.users.update(userId, data);\n  //   history.push(`/users/${userId}`);\n  // };\n\n\n  useEffect(() => {\n    setData(prevState => ({ ...prevState,\n      ...data,\n      qualities: getQualities(currentUser.qualities),\n      profession: getProfessionById(currentUser.profession),\n      name: currentUser.name,\n      email: currentUser.email\n    }));\n    console.log(data); //   api.professions.fetchAll().then((data) => {\n    //     const professionsList = Object.keys(data).map((professionName) => ({\n    //       label: data[professionName].name,\n    //       value: data[professionName]._id,\n    //     }));\n    //     setProfession(professionsList);\n    //   });\n    //   api.qualities.fetchAll().then((data) => {\n    //     const qualitiesList = Object.keys(data).map((optionName) => ({\n    //       value: data[optionName]._id,\n    //       label: data[optionName].name,\n    //       color: data[optionName].color,\n    //     }));\n    //     setQualities(qualitiesList);\n    //   });\n  }, []);\n  const validatorConfig = {\n    email: {\n      isRequired: {\n        message: \"Электронная почта обязательна для заполнения\"\n      },\n      isEmail: {\n        message: \"Email введен некорректно\"\n      }\n    },\n    name: {\n      isRequired: {\n        message: \"Введите ваше имя\"\n      }\n    }\n  };\n  useEffect(() => {\n    validate();\n  }, [data]);\n\n  const handleChange = target => {\n    setData(prevState => ({ ...prevState,\n      [target.name]: target.value\n    }));\n  };\n\n  const validate = () => {\n    const errors = validator(data, validatorConfig);\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const isValid = Object.keys(errors).length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(BackHistoryButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 offset-md-3 shadow p-4\",\n        children: !isLoading ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"\\u0418\\u043C\\u044F\",\n            name: \"name\",\n            value: data.name,\n            onChange: handleChange,\n            error: errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\",\n            name: \"email\",\n            value: data.email,\n            onChange: handleChange,\n            error: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SelectField, {\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u0432\\u043E\\u044E \\u043F\\u0440\\u043E\\u0444\\u0435\\u0441\\u0441\\u0438\\u044E\",\n            defaultOption: \"Choose...\",\n            options: professionsList,\n            name: \"profession\",\n            onChange: handleChange,\n            value: data.profession,\n            error: errors.profession\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(RadioField, {\n            options: [{\n              name: \"Male\",\n              value: \"male\"\n            }, {\n              name: \"Female\",\n              value: \"female\"\n            }, {\n              name: \"Other\",\n              value: \"other\"\n            }],\n            value: data.sex,\n            name: \"sex\",\n            onChange: handleChange,\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448 \\u043F\\u043E\\u043B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MultiSelectField, {\n            defaultValue: transformData(data.qualities),\n            options: transformData(qualities),\n            onChange: handleChange,\n            name: \"qualities\",\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0438 \\u043A\\u0430\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430\"\n          }, data.qualities, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: !isValid,\n            className: \"btn btn-primary w-100 mx-auto\",\n            children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this) : \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditUserPage, \"2WkYMYg4hd2+9h0OLTcxdybOdEU=\", false, function () {\n  return [useParams, useAuth, useHistory, useProfessions, useQualities];\n});\n\n_c = EditUserPage;\nexport default EditUserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUserPage\");","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/17 {auth and reg 2}/src/app/components/page/editUserPage/editUserPage.jsx"],"names":["React","useEffect","useState","useHistory","useParams","validator","api","TextField","SelectField","RadioField","MultiSelectField","BackHistoryButton","useAuth","useProfessions","useQualities","EditUserPage","userId","currentUser","history","isLoading","setIsLoading","professions","qualities","errors","setErrors","professionsList","map","p","label","name","value","_id","data","setData","email","profession","sex","getQualities","elements","qualitiesArray","elem","quality","push","color","getProfessionById","id","prof","transformData","qual","transformQualities","forEach","element","handleSubmit","e","preventDefault","isValid","validate","users","update","then","console","log","prevState","validatorConfig","isRequired","message","isEmail","handleChange","target","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { validator } from \"../../../utils/validator\";\nimport api from \"../../../api\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radioField\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { useAuth } from \"../../../hooks/useAuth\";\nimport { useProfessions } from \"../../../hooks/useProfession\";\nimport { useQualities } from \"../../../hooks/useQualities\";\n\nconst EditUserPage = () => {\n  const { userId } = useParams();\n  const { currentUser } = useAuth();\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const { professions } = useProfessions();\n  const { qualities } = useQualities();\n  const [errors, setErrors] = useState({});\n\n  const professionsList = professions.map((p) => ({\n    label: p.name,\n    value: p._id,\n  }));\n\n  const [data, setData] = useState({\n    name: \"\",\n    email: \"\",\n    profession: \"\",\n    sex: \"male\",\n    qualities: [],\n  });\n\n  const getQualities = (elements) => {\n    const qualitiesArray = [];\n    for (const elem of elements) {\n      for (const quality in qualities) {\n        if (elem === qualities[quality]._id) {\n          qualitiesArray.push({\n            _id: qualities[quality]._id,\n            name: qualities[quality].name,\n            color: qualities[quality].color,\n          });\n        }\n      }\n    }\n    return qualitiesArray;\n  };\n\n  function getProfessionById(id) {\n    for (const prof of professions) {\n      if (prof._id === id) {\n        return prof.name;\n      }\n    }\n  }\n\n  const transformData = (data) => {\n    return data.map((qual) => ({\n      label: qual.name,\n      value: qual._id,\n      color: qual.color,\n    }));\n  };\n\n  const transformQualities = (elements) => {\n    const qualitiesArray = [];\n    elements.forEach((element) => {\n      qualitiesArray.push({\n        id: element.value,\n        name: element.label,\n        color: element.color,\n      });\n    });\n    return qualitiesArray;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const isValid = validate();\n    if (!isValid) return;\n    const { profession, qualities } = data;\n    api.users\n      .update(userId, {\n        ...data,\n        profession: getProfessionById(profession),\n        qualities: transformQualities(data.qualities),\n      })\n      .then((data) => history.push(`/users/${currentUser._id}`));\n    console.log({\n      ...data,\n      name: currentUser.name,\n      profession: getProfessionById(profession),\n      qualities: getQualities(transformData(qualities)),\n    });\n  };\n\n  // const handleSubmit2 = (e) => {\n  //   e.preventDefault();\n  //   let {profession, qualities} = data;\n  //   console.log({\n  //     ...data,\n  //     profession: getProfessionById(data.profession),\n  //     qualities: getNameQualities2(data.qualities)\n  //   });\n  //   data = {\n  //     ...data,\n  //     profession: getProfessionById(data.profession),\n  //     qualities: getNameQualities2(data.qualities)\n  //   };\n  //\n  //   api.users.update(userId, data);\n  //   history.push(`/users/${userId}`);\n  // };\n\n  useEffect(() => {\n    setData((prevState) => ({\n      ...prevState,\n      ...data,\n      qualities: getQualities(currentUser.qualities),\n      profession: getProfessionById(currentUser.profession),\n      name: currentUser.name,\n      email: currentUser.email,\n    }));\n    console.log(data);\n    //   api.professions.fetchAll().then((data) => {\n    //     const professionsList = Object.keys(data).map((professionName) => ({\n    //       label: data[professionName].name,\n    //       value: data[professionName]._id,\n    //     }));\n    //     setProfession(professionsList);\n    //   });\n    //   api.qualities.fetchAll().then((data) => {\n    //     const qualitiesList = Object.keys(data).map((optionName) => ({\n    //       value: data[optionName]._id,\n    //       label: data[optionName].name,\n    //       color: data[optionName].color,\n    //     }));\n    //     setQualities(qualitiesList);\n    //   });\n  }, []);\n  const validatorConfig = {\n    email: {\n      isRequired: {\n        message: \"Электронная почта обязательна для заполнения\",\n      },\n      isEmail: {\n        message: \"Email введен некорректно\",\n      },\n    },\n    name: {\n      isRequired: {\n        message: \"Введите ваше имя\",\n      },\n    },\n  };\n  useEffect(() => {\n    validate();\n  }, [data]);\n  const handleChange = (target) => {\n    setData((prevState) => ({\n      ...prevState,\n      [target.name]: target.value,\n    }));\n  };\n\n  const validate = () => {\n    const errors = validator(data, validatorConfig);\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  const isValid = Object.keys(errors).length === 0;\n  return (\n    <div className=\"container mt-5\">\n      <BackHistoryButton />\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3 shadow p-4\">\n          {!isLoading ? (\n            <form onSubmit={handleSubmit}>\n              <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n              />\n              <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n              />\n\n              <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                options={professionsList}\n                name=\"profession\"\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n              />\n              <RadioField\n                options={[\n                  { name: \"Male\", value: \"male\" },\n                  { name: \"Female\", value: \"female\" },\n                  { name: \"Other\", value: \"other\" },\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n              />\n              <MultiSelectField\n                key={data.qualities}\n                defaultValue={transformData(data.qualities)}\n                options={transformData(qualities)}\n                onChange={handleChange}\n                name=\"qualities\"\n                label=\"Выберите ваши качества\"\n              />\n              <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n              >\n                Обновить\n              </button>\n            </form>\n          ) : (\n            \"Loading...\"\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditUserPage;\n"]},"metadata":{},"sourceType":"module"}