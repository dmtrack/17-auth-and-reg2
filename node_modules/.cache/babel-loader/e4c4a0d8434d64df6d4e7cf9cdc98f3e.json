{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport { httpAuth } from \"../hooks/useAuth\";\nimport localStorageService from \"./localStorage.service\";\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\nhttp.interceptors.request.use(async function (config) {\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n    const expiresDate = localStorageService.getTokenExpiresDate();\n    const refreshToken = localStorageService.getRefreshToken();\n\n    if (refreshToken && expiresDate < Date.now()) {\n      const {\n        data\n      } = await httpAuth.post(\"token\", {\n        grant_type: \"refresh_token\",\n        refresh_token: refreshToken\n      });\n      localStorageService.setTokens({\n        refreshToken: data.refresh_token,\n        idToken: data.id_token,\n        expiresIn: data.expires_id,\n        localId: data.user_id\n      });\n    }\n\n    const accessToken = localStorageService.getAccessToken();\n\n    if (accessToken) {\n      config.params = { ...config.params,\n        auth: accessToken\n      };\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transformData(data) {\n  return data && !data._id ? Object.keys(data).map(key => ({ ...data[key]\n  })) : data;\n}\n\nhttp.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transformData(res.data)\n    };\n  }\n\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/dmtrack/Desktop/fast-company-before-hw/src/app/services/http.service.js"],"names":["axios","toast","configFile","httpAuth","localStorageService","http","create","baseURL","apiEndpoint","interceptors","request","use","config","isFireBase","containSlash","test","url","slice","expiresDate","getTokenExpiresDate","refreshToken","getRefreshToken","Date","now","data","post","grant_type","refresh_token","setTokens","idToken","id_token","expiresIn","expires_id","localId","user_id","accessToken","getAccessToken","params","auth","error","Promise","reject","transformData","_id","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","put","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport { httpAuth } from \"../hooks/useAuth\";\nimport localStorageService from \"./localStorage.service\";\n\nconst http = axios.create({\n    baseURL: configFile.apiEndpoint\n});\n\nhttp.interceptors.request.use(\n    async function (config) {\n        if (configFile.isFireBase) {\n            const containSlash = /\\/$/gi.test(config.url);\n            config.url =\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n            const expiresDate = localStorageService.getTokenExpiresDate();\n            const refreshToken = localStorageService.getRefreshToken();\n            if (refreshToken && expiresDate < Date.now()) {\n                const { data } = await httpAuth.post(\"token\", {\n                    grant_type: \"refresh_token\",\n                    refresh_token: refreshToken\n                });\n\n                localStorageService.setTokens({\n                    refreshToken: data.refresh_token,\n                    idToken: data.id_token,\n                    expiresIn: data.expires_id,\n                    localId: data.user_id\n                });\n            }\n            const accessToken = localStorageService.getAccessToken();\n            if (accessToken) {\n                config.params = { ...config.params, auth: accessToken };\n            }\n        }\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n);\nfunction transformData(data) {\n    return data && !data._id\n        ? Object.keys(data).map((key) => ({\n              ...data[key]\n          }))\n        : data;\n}\nhttp.interceptors.response.use(\n    (res) => {\n        if (configFile.isFireBase) {\n            res.data = { content: transformData(res.data) };\n        }\n        return res;\n    },\n    function (error) {\n        const expectedErrors =\n            error.response &&\n            error.response.status >= 400 &&\n            error.response.status < 500;\n\n        if (!expectedErrors) {\n            console.log(error);\n            toast.error(\"Something was wrong. Try it later\");\n        }\n        return Promise.reject(error);\n    }\n);\nconst httpService = {\n    get: http.get,\n    post: http.post,\n    put: http.put,\n    delete: http.delete\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}