{"ast":null,"code":"var _jsxFileName = \"/Users/dmtrack/Documents/JS/Module 2 React/17 {auth and reg 2}/src/app/hooks/useQualities.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport qualityService from \"../services/quality.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QualitiesContext = /*#__PURE__*/React.createContext();\nexport const useQualities = () => {\n  _s();\n\n  return useContext(QualitiesContext);\n};\n\n_s(useQualities, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const QualitiesProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [qualities, setQualities] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    const getQualities = async () => {\n      try {\n        const {\n          content\n        } = await qualityService.fetchAll();\n        setQualities(content);\n        setLoading(false);\n      } catch (error) {\n        errorCatcher(error);\n      }\n    };\n\n    getQualities();\n  }, []);\n\n  const getQuality = id => {\n    return qualities.find(q => q._id === id);\n  };\n\n  function errorCatcher(error) {\n    const {\n      message\n    } = error.response.data;\n    setError(message);\n  }\n\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(QualitiesContext.Provider, {\n    value: {\n      qualities,\n      getQuality,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(QualitiesProvider, \"+X9nLV+Yqg17wFbLXo8oR1RuCO4=\");\n\n_c = QualitiesProvider;\nQualitiesProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"QualitiesProvider\");","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/17 {auth and reg 2}/src/app/hooks/useQualities.jsx"],"names":["React","useContext","useEffect","useState","toast","PropTypes","qualityService","QualitiesContext","createContext","useQualities","QualitiesProvider","children","qualities","setQualities","error","setError","isLoading","setLoading","getQualities","content","fetchAll","errorCatcher","getQuality","id","find","q","_id","message","response","data","propTypes","oneOfType","arrayOf","node"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AAEA,MAAMC,gBAAgB,gBAAGP,KAAK,CAACQ,aAAN,EAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B,SAAOR,UAAU,CAACM,gBAAD,CAAjB;AACH,CAFM;;GAAME,Y;;AAIb,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,UAAZ,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,YAAY,GAAG,YAAY;AAC7B,UAAI;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAc,MAAMb,cAAc,CAACc,QAAf,EAA1B;AACAP,QAAAA,YAAY,CAACM,OAAD,CAAZ;AACAF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAJD,CAIE,OAAOH,KAAP,EAAc;AACZO,QAAAA,YAAY,CAACP,KAAD,CAAZ;AACH;AACJ,KARD;;AASAI,IAAAA,YAAY;AACf,GAXQ,EAWN,EAXM,CAAT;;AAYA,QAAMI,UAAU,GAAIC,EAAD,IAAQ;AACvB,WAAOX,SAAS,CAACY,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUH,EAAhC,CAAP;AACH,GAFD;;AAIA,WAASF,YAAT,CAAsBP,KAAtB,EAA6B;AACzB,UAAM;AAAEa,MAAAA;AAAF,QAAcb,KAAK,CAACc,QAAN,CAAeC,IAAnC;AACAd,IAAAA,QAAQ,CAACY,OAAD,CAAR;AACH;;AACDzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,KAAK,KAAK,IAAd,EAAoB;AAChBV,MAAAA,KAAK,CAACU,KAAD,CAAL;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GALQ,EAKN,CAACD,KAAD,CALM,CAAT;AAOA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AACI,IAAA,KAAK,EAAE;AACHF,MAAAA,SADG;AAEHU,MAAAA,UAFG;AAGHN,MAAAA;AAHG,KADX;AAAA,cAOKL;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA3CM;;IAAMD,iB;;KAAAA,iB;AA6CbA,iBAAiB,CAACoB,SAAlB,GAA8B;AAC1BnB,EAAAA,QAAQ,EAAEN,SAAS,CAAC0B,SAAV,CAAoB,CAC1B1B,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC4B,IAA5B,CAD0B,EAE1B5B,SAAS,CAAC4B,IAFgB,CAApB;AADgB,CAA9B","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport qualityService from \"../services/quality.service\";\n\nconst QualitiesContext = React.createContext();\n\nexport const useQualities = () => {\n    return useContext(QualitiesContext);\n};\n\nexport const QualitiesProvider = ({ children }) => {\n    const [qualities, setQualities] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const getQualities = async () => {\n            try {\n                const { content } = await qualityService.fetchAll();\n                setQualities(content);\n                setLoading(false);\n            } catch (error) {\n                errorCatcher(error);\n            }\n        };\n        getQualities();\n    }, []);\n    const getQuality = (id) => {\n        return qualities.find((q) => q._id === id);\n    };\n\n    function errorCatcher(error) {\n        const { message } = error.response.data;\n        setError(message);\n    }\n    useEffect(() => {\n        if (error !== null) {\n            toast(error);\n            setError(null);\n        }\n    }, [error]);\n\n    return (\n        <QualitiesContext.Provider\n            value={{\n                qualities,\n                getQuality,\n                isLoading\n            }}\n        >\n            {children}\n        </QualitiesContext.Provider>\n    );\n};\n\nQualitiesProvider.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n"]},"metadata":{},"sourceType":"module"}