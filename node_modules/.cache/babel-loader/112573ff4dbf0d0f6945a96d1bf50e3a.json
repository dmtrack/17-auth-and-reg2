{"ast":null,"code":"var _jsxFileName = \"/Users/dmtrack/Desktop/fast-company-before-hw/src/app/hooks/useComments.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport { useParams } from \"react-router-dom\";\nimport { useAuth } from \"./useAuth\";\nimport { nanoid } from \"nanoid\";\nimport commentService from \"../services/comment.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsContext = /*#__PURE__*/React.createContext();\nexport const useComments = () => {\n  _s();\n\n  return useContext(CommentsContext);\n};\n\n_s(useComments, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const CommentsProvider = ({\n  children\n}) => {\n  _s2();\n\n  const {\n    userId\n  } = useParams();\n  const {\n    currentUser\n  } = useAuth();\n  const [isLoading, setLoading] = useState(true);\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getComments();\n  }, [userId]);\n\n  async function createComment(data) {\n    const comment = { ...data,\n      _id: nanoid(),\n      pageId: userId,\n      created_at: Date.now(),\n      userId: currentUser._id\n    };\n\n    try {\n      const {\n        content\n      } = await commentService.createComment(comment);\n      setComments(prevState => [...prevState, content]);\n    } catch (error) {\n      errorCatcher(error);\n    }\n\n    console.log(comment);\n  }\n\n  async function getComments() {\n    try {\n      const {\n        content\n      } = await commentService.getComments(userId);\n      setComments(content);\n    } catch (error) {\n      errorCatcher(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function errorCatcher(error) {\n    const {\n      message\n    } = error.response.data;\n    setError(message);\n  }\n\n  async function removeComment(id) {\n    try {\n      const {\n        content\n      } = await commentService.removeComment(id);\n\n      if (content === null) {\n        setComments(prevState => prevState.filter(c => c._id !== id));\n      }\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(CommentsContext.Provider, {\n    value: {\n      comments,\n      createComment,\n      isLoading,\n      removeComment\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(CommentsProvider, \"8Hr2VwAIxLtaS2x9tzGu0zyzhOg=\", false, function () {\n  return [useParams, useAuth];\n});\n\n_c = CommentsProvider;\nCommentsProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentsProvider\");","map":{"version":3,"sources":["/Users/dmtrack/Desktop/fast-company-before-hw/src/app/hooks/useComments.jsx"],"names":["React","useContext","useEffect","useState","PropTypes","toast","useParams","useAuth","nanoid","commentService","CommentsContext","createContext","useComments","CommentsProvider","children","userId","currentUser","isLoading","setLoading","comments","setComments","error","setError","getComments","createComment","data","comment","_id","pageId","created_at","Date","now","content","prevState","errorCatcher","console","log","message","response","removeComment","id","filter","c","propTypes","oneOfType","arrayOf","node"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport { useParams } from \"react-router-dom\";\nimport { useAuth } from \"./useAuth\";\nimport { nanoid } from \"nanoid\";\nimport commentService from \"../services/comment.service\";\n\nconst CommentsContext = React.createContext();\n\nexport const useComments = () => {\n    return useContext(CommentsContext);\n};\n\nexport const CommentsProvider = ({ children }) => {\n    const { userId } = useParams();\n    const { currentUser } = useAuth();\n    const [isLoading, setLoading] = useState(true);\n    const [comments, setComments] = useState([]);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        getComments();\n    }, [userId]);\n    async function createComment(data) {\n        const comment = {\n            ...data,\n            _id: nanoid(),\n            pageId: userId,\n            created_at: Date.now(),\n            userId: currentUser._id\n        };\n        try {\n            const { content } = await commentService.createComment(comment);\n            setComments((prevState) => [...prevState, content]);\n        } catch (error) {\n            errorCatcher(error);\n        }\n        console.log(comment);\n    }\n    async function getComments() {\n        try {\n            const { content } = await commentService.getComments(userId);\n            setComments(content);\n        } catch (error) {\n            errorCatcher(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n    function errorCatcher(error) {\n        const { message } = error.response.data;\n        setError(message);\n    }\n    async function removeComment(id) {\n        try {\n            const { content } = await commentService.removeComment(id);\n            if (content === null) {\n                setComments((prevState) =>\n                    prevState.filter((c) => c._id !== id)\n                );\n            }\n        } catch (error) {\n            errorCatcher(error);\n        }\n    }\n    useEffect(() => {\n        if (error !== null) {\n            toast(error);\n            setError(null);\n        }\n    }, [error]);\n    return (\n        <CommentsContext.Provider\n            value={{ comments, createComment, isLoading, removeComment }}\n        >\n            {children}\n        </CommentsContext.Provider>\n    );\n};\n\nCommentsProvider.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n"]},"metadata":{},"sourceType":"module"}